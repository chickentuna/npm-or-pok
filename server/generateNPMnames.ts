const names = require('all-the-package-names')
const fs = require('fs')

function allLetters (inputtxt) {
  return inputtxt.match(/^[A-Za-z]+$/)
}

const blacklist = 'coin,geo,induce,append,secure,discover,device,back,copy,promise,fast,normal,noop,object,stats,locate,paste,serve,wake,what,yq,convert,space,rift,matrix,favorites,down,manage,project,count,fifo,junk,range,page,picture,twitter,lyrics,perf,please,assert,update,fx,sex,quick,order,start,report,pilot,quote,base,HTML,NBSP,fail,binary,route,Pipe,return,Program,ASCII,viewable,polyfil,byte,link,syntax,Abend,ActionScript,ActiveX,Aggregation,Alert,Algol,Algorithm,Allocate,APK,Applet,Argument,Array,ASCII,local,camera,Assembler,Assembly,AutoHotkey,Automation,Babel,Back-end,permut,Bean,BeanShell,Bind,Block,once,load,window,BOM,Bool,Boolean,Bracket,Branch,Brooks,Browse,Bug,hh,Callback,CamelCase,Char,Class,Class,Classpath,Clojure,Closure,CLR,db,COBOL,Cocoa,Code,write,free,pack,design,Codepage,CoffeeScript,Commfent,Compilation,Compile,Compiler,Complementarity,Compute,Concat,Concatenation,Concurrency,Constant,Constructor,CPAN,CPL,Crapplet,CSAT,CSS,CVS,Cygwin,mmonitor,Datalog,Declaration,Declare,Decompiler,Decrement,Delimiter,Developer,DHTML,Diff,Dissembler,Django,DML,Dribbleware,Dump,Dword,xarg,Eclipse,ECMAScript,Element,Elixir,Ellipsis,Else,Elsif,Encapsulation,Encode,Endian,EOF,Epoch,Eq,Equal,Error,Errorlevel,Esac,Escape,Eval,Event,Exception,Exec,Exists,Exponent,Expression,Flag,Floating-point,For,Foreach,Forth,FORTRAN,Function,Glitch,Goto,Grasshopper,GTK,Hash,Haskell,import,Heap,export,Heroku,Hiew,HTML,Hwclock,Idempotence,Increment,Inheritance,Inline,Instance,Instantiation,Instructions,Int,Integer,Interpreted,Interpreter,Invalid,IOCCC,IPC,ISAPI,Iteration,Java,JavaBean,Javac,JavaFX,JavaScript,JavaScriptCore,Javax,JBuilder,JCL,JDBC,JDK,JHTML,JNI,JRE,JScript,JSON,JSP,JSR,Julia,Jupyter,JVM,Karel,Kit,Kludge,Kluge,Kotlin,Label,kd,Language,Lexicon,Library,power,cursor,tunnel,buddy,level,office,Linker,Literal,LLVM,LOGO,Loop,Loophole,Math,Matlab,Mbean,Memoization,Mercurial,Metacharacter,Metaclass,Metalanguage,Method,Metro,Middleware,Mimo,Mod,Module,Modulo,MSDN,MSVC,MUMPS,Mutex,NDA,Newline,Node.js,Nodelist,Null,Objective-C,OCaml,Octave,ODBC,OnMouseOver,Opcode,Operand,Operator,web,Overload,Package,Parenthesis,Parse,Pascal,Pastebin,P-code,PDL,PEAR,Perl,PersonalJava,PHP,Pick,Pickling,PicoJava,Pipe,Pointer,Polymorphism,Pop,proxy,Private,Procedure,Process,Program,Programmable,Programmer,foobar,Prolog,Pseudo,Public,Push,Python,Pythonic,Qi,QT,Racket,Random,RCS,RDF,React,Recompile,Recursion,Recursive,Regex,Reia,REM,Remark,REPL,Routine,RPG,Sandbox,Scratch,SDK,Section,Segfault,Separator,Sequence,build,Servlet,site,SGML,Shebang,Shift,Signedness,Smalltalk,Snippet,Socket,Soft,Source,SourceForge,Sparsity,lib,SPL,Spooling,swipe,Stack,Statement,Stdin,Stubroutine,Stylesheet,Submit,Subprogram,Subroutine,Subscript,Substring,Subversion,Superclass,Tcl,Tessellation,movie,move,Thread,Thunk,Token,ToolboX,Transcompiler,Trunk,Tuple,Undefined,Underflow,Unescape,Unshift,Value,Variable,VB,Vector,VHDL,VIM,Void,Wasm,number,WebAssembly,WebGL,While,WML,Workspace,XML,XNA,publish,XSL,XSLT,YAML,Zombie,buffer,basic,class,mongo,watch,utils,evt,mixin,index,simple,regex,reload,insert,data,commit,cache,token,reducify,while,after,quest,helper,spatial,select,email,ping,mail,angular,video,hello,auto,node,svg,material,time,demo,utility,record,info,overlap,lookup,sql,anywhere,file,template,calcul,micro,dispatch,sync,static,metric,check,text,table,list,work,provide,module,query,event,git,emoji,flow,run,graph,help,type,online,first,value,false,true,confirm,console,json,zip,tooltip,sample,log,first,second,third,wrap,eval,test,tool,ensure,view,lazy,learn,frame,group,stop,optim,easy,home,make,small,title,menu,queue,retro,robot,tiny,wanna,want,key,sort,lx,agent,panic,mask,mix,meter,punk,real,hyper,image,img,box'
  .split(',').map(v => v.toLowerCase()).map(v => v.replace(/ |-/g, ''))

let oneWordNPMs = names.map(v => v.toLowerCase())
  .filter(v => allLetters(v))
  .filter(v => !v.endsWith('js'))
  .filter(v => !v.endsWith('ify'))
  .filter(v => !v.endsWith('it'))
  .filter(v => !v.endsWith('app'))
  .filter(v => !v.endsWith('bz'))
  .filter(v => !v.endsWith('mk'))
  .filter(v => !v.endsWith('fs'))
  .filter(v => !v.endsWith('me'))
  .filter(v => !v.endsWith('pg'))
  .filter(v => !v.endsWith('bot'))
  .filter(v => !v.endsWith('q'))
  .filter(v => !v.endsWith('kr'))
  .filter(v => !v.endsWith('vn'))
  .filter(v => !v.endsWith('lab'))
  .filter(v => !v.endsWith('cc'))
  .filter(v => !v.endsWith('plus'))
  .filter(v => !v.endsWith('ize'))
  .filter(v => !v.endsWith('nr'))
  .filter(v => !v.endsWith('env'))
  .filter(v => !v.endsWith('q'))
  .filter(v => !v.endsWith('kk'))
  .filter(v => !v.endsWith('rr'))
  .filter(v => !v.endsWith('uid'))
  .filter(v => !v.endsWith('app'))
  .filter(v => !v.startsWith('is'))
  .filter(v => !v.startsWith('pc'))
  .filter(v => !v.startsWith('jb'))
  .filter(v => !v.startsWith('hc'))
  .filter(v => !v.startsWith('pp'))
  .filter(v => !v.startsWith('ss'))
  .filter(v => !v.startsWith('mc'))
  .filter(v => !v.startsWith('gp'))
  .filter(v => !v.startsWith('get'))
  .filter(v => !v.startsWith('imm'))
  .filter(v => !v.startsWith('jg'))
  .filter(v => !v.startsWith('set'))
  .filter(v => !v.startsWith('add'))
  .filter(v => !v.startsWith('ip'))
  .filter(v => !v.startsWith('iq'))
  .filter(v => !v.startsWith('on'))
  .filter(v => !v.startsWith('ic'))
  .filter(v => !v.startsWith('ia'))
  .filter(v => !v.startsWith('iv'))
  .filter(v => !v.startsWith('jf'))
  .filter(v => !v.startsWith('jl'))
  .filter(v => !v.startsWith('jt'))
  .filter(v => !v.startsWith('jm'))
  .filter(v => !v.startsWith('jv'))
  .filter(v => !v.startsWith('jh'))
  .filter(v => !v.startsWith('jy'))
  .filter(v => !v.startsWith('js'))
  .filter(v => !v.startsWith('jk'))
  .filter(v => v.length <= 10)
  .filter(v => !v.split('').some(c => v.includes(c + c + c)))
  .filter(v => ['a', 'e', 'o', 'i', 'u'].some(c => v.includes(c)))
  .filter(v => !v.match(/[bcdfghjklmnpqrstvwxz]{3}/))
  .filter(v => !blacklist.some(b => v.includes(b)))

const words = fs.readFileSync('/usr/share/dict/words')

oneWordNPMs = oneWordNPMs.filter(v => !words.includes(v))

oneWordNPMs.forEach(v => console.log(v))
